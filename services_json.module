<?php

/**
 * @file
 * Contains service.json implementation.
 */


/**
 * Implements hook_menu().
 */
function services_json_menu() {
  $items = array();

  $items['services.json'] = array(
    'title' => 'Services information',
    'access arguments' => array('access services.json'),
    'page callback' => 'services_json_get_list',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function services_json_permission() {
  return array(
    'access services.json' => array(
      'title' => t('Access services modules'),
    ),
  );
}

/**
 * Page callback.
 */
function services_json_get_list() {
  // Add services module endpoints.
  $list = services_json_get_auto_deducted_endpoints();
  // List of services exposed by custom hook.
  if ($custom_services = module_invoke_all('services_json_info')) {
    $list = array_merge($list, $custom_services);
  }

  if (!empty($list)) {
    /* @var  $service ServicesJsonItemInterface */
    foreach ($list as $service) {
      $output[$service->getDomain()][] = $service->getAsArray();
    }
    ksort($output);
  }
  else {
    $output = array(
      'status' => 'error',
      'message' => 'No service description available',
    );
  }
  return drupal_json_output($list);
}

/**
 * Implements hook_hook_info().
 */
function services_json_hook_info() {
  $hooks['services_json_info'] = array(
    'group' => 'services',
  );
  return $hooks;
}

/**
 * Process endpoints exposed by services and other obvious modules.
 */
function services_json_get_auto_deducted_endpoints() {
  $services = array();

  // Services module.
  if (module_exists('services')) {
    $endpoints = services_endpoint_load_all();
    foreach ($endpoints as $endpoint) {
      if (empty($endpoint->disabled)) {
        $service = services_endpoint_load($endpoint->name);
        $server = $endpoint->server;
        try {
          foreach (ServicesJsonServiceMapping::createFromEndpoint($service, $server) as $service_object) {
            $services[] = $service_object;
          }
        }
        catch (Exception $e) {

        }

      }
    }
  }

  // SOAP Server module.

  return $services;
}
